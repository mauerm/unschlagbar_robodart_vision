/* Auto-generated by genmsg_cpp for file /home/mauerm/groovy_ws/sandbox/robodart_vision/srv/Point.srv */
#ifndef ROBODART_VISION_SERVICE_POINT_H
#define ROBODART_VISION_SERVICE_POINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace robodart_vision
{
template <class ContainerAllocator>
struct PointRequest_ {
  typedef PointRequest_<ContainerAllocator> Type;

  PointRequest_()
  {
  }

  PointRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::robodart_vision::PointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robodart_vision::PointRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PointRequest
typedef  ::robodart_vision::PointRequest_<std::allocator<void> > PointRequest;

typedef boost::shared_ptr< ::robodart_vision::PointRequest> PointRequestPtr;
typedef boost::shared_ptr< ::robodart_vision::PointRequest const> PointRequestConstPtr;



template <class ContainerAllocator>
struct PointResponse_ {
  typedef PointResponse_<ContainerAllocator> Type;

  PointResponse_()
  : x(0.0)
  , y(0.0)
  {
  }

  PointResponse_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  {
  }

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;


  typedef boost::shared_ptr< ::robodart_vision::PointResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robodart_vision::PointResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PointResponse
typedef  ::robodart_vision::PointResponse_<std::allocator<void> > PointResponse;

typedef boost::shared_ptr< ::robodart_vision::PointResponse> PointResponsePtr;
typedef boost::shared_ptr< ::robodart_vision::PointResponse const> PointResponseConstPtr;


struct Point
{

typedef PointRequest Request;
typedef PointResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Point
} // namespace robodart_vision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robodart_vision::PointRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robodart_vision::PointRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robodart_vision::PointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::robodart_vision::PointRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::robodart_vision::PointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robodart_vision/PointRequest";
  }

  static const char* value(const  ::robodart_vision::PointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robodart_vision::PointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::robodart_vision::PointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robodart_vision::PointRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robodart_vision::PointResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robodart_vision::PointResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robodart_vision::PointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "209f516d3eb691f0663e25cb750d67c1";
  }

  static const char* value(const  ::robodart_vision::PointResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x209f516d3eb691f0ULL;
  static const uint64_t static_value2 = 0x663e25cb750d67c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::robodart_vision::PointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robodart_vision/PointResponse";
  }

  static const char* value(const  ::robodart_vision::PointResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robodart_vision::PointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float64 x\n\
float64 y\n\
\n\
\n\
";
  }

  static const char* value(const  ::robodart_vision::PointResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robodart_vision::PointResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robodart_vision::PointRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PointRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robodart_vision::PointResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PointResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<robodart_vision::Point> {
  static const char* value() 
  {
    return "209f516d3eb691f0663e25cb750d67c1";
  }

  static const char* value(const robodart_vision::Point&) { return value(); } 
};

template<>
struct DataType<robodart_vision::Point> {
  static const char* value() 
  {
    return "robodart_vision/Point";
  }

  static const char* value(const robodart_vision::Point&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robodart_vision::PointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "209f516d3eb691f0663e25cb750d67c1";
  }

  static const char* value(const robodart_vision::PointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robodart_vision::PointRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robodart_vision/Point";
  }

  static const char* value(const robodart_vision::PointRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<robodart_vision::PointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "209f516d3eb691f0663e25cb750d67c1";
  }

  static const char* value(const robodart_vision::PointResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<robodart_vision::PointResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robodart_vision/Point";
  }

  static const char* value(const robodart_vision::PointResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROBODART_VISION_SERVICE_POINT_H

